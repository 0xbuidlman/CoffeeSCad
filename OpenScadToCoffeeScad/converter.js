// Generated by CoffeeScript 1.3.3
(function() {
  var ModuleMatcher, StuffMatcher, modMatcher, output_string, test_string;

  output_string = "";

  test_string = "width=25.487; height=17.17; bli=[0,25,0];";

  test_string = "abcdef;abcf;module bubu(){a=14;} c+=13.2; d-=12;module ada_servo_driver(pos=[0,0,0],rot=[0,0,0]){  width=25.4;  length=62.5;  height=3;  translate(pos) rotate(rot)  {    translate([0,0,height/2]) cube([width,length,height],center=true);  }}module toto(){}";

  StuffMatcher = (function() {

    function StuffMatcher() {
      this.stuffs = [];
    }

    return StuffMatcher;

  })();

  ModuleMatcher = (function() {

    ModuleMatcher.prototype.main_pattern = /(?:module(.*?)\((.*?)??\)\{.*?\})/g;

    ModuleMatcher.prototype.components_pattern = /(?:module(.*?)\((.*?)??\)\{(.*?)??\})/;

    ModuleMatcher.prototype.expr_pattern = /([\w]+)[\=\+\-\*\\/\%]+([\w.]+)(?=;)/g;

    ModuleMatcher.prototype.params_pattern = /[^,]+/g;

    function ModuleMatcher() {
      this.modules = [];
    }

    ModuleMatcher.prototype.parse = function(src) {
      var className, content, exprmatches, match, matches, params, submatches, _i, _len, _results;
      matches = src.match(this.main_pattern);
      _results = [];
      for (_i = 0, _len = matches.length; _i < _len; _i++) {
        match = matches[_i];
        submatches = match.match(this.components_pattern);
        /* for submatch in submatches
          console.log("submatch: "+submatch)
        */

        className = submatches[1].replace(" ", "");
        console.log("Module/class name: " + className);
        params = submatches[2];
        if ((params != null)) {
          console.log("   Module/class params: " + params);
        }
        content = submatches[3];
        if (content != null) {
          exprmatches = content.match(this.expr_pattern);
          _results.push(console.log("   Content matches: " + exprmatches));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return ModuleMatcher;

  })();

  test_string = test_string.replace("\n", " ");

  console.log("Raw string " + test_string);

  modMatcher = new ModuleMatcher();

  modMatcher.parse(test_string);

}).call(this);
