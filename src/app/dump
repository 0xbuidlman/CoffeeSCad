#TOTALLY useless, and slow, mirror effect 
        resultCSG = new CsgProcessor().processScript(@model.get("content")+".mirroredZ()")
        geom = THREE.CSG.fromCSG(resultCSG)
        mat = new THREE.MeshPhongMaterial({color:  0xFFFFFF , shading: THREE.SmoothShading,  shininess: shine, specular: spec, metal: true, vertexColors: THREE.VertexColors}) 
        mat.opacity = 0.5
        mirrormesh = new THREE.Mesh(geom, mat)
        #mirrormesh.rotation.set(0,90,0)
        #mirrormesh.position.set(@mesh.position.x,@mesh.position.y,-@mesh.position.z-50)
        @mesh.add mirrormesh



      #superoptions = merge defaults, options
    #console.log pos
    #@pos=pos
    #@rot=rot
    #@union  new Cube(size:[50,100,50],center:@pos)
    #console.log "undefined is undefined"    
 
    
    setup:(options)=>
      """Fetch settings"""
      @settings.fetch()
      
      """Initialize correct theme css"""
      theme = @settings.get("General").get("theme")
      $("#mainTheme").attr("href","assets/css/themes/#{theme}/bootstrap.css")
      #$("link").attr("href",$(this).attr('rel'))
      """Fetch library content"""
      @lib.fetch()
    
    exportProjectToStl:(mainpart)=>
      stlExp = new CsgStlExporterMin mainpart.csg
      blobUrl = stlExp.export()
      @vent.trigger("stlGenDone", blobUrl)
    
   
      
      """Create all main views"""
      @codeEditorView = new CodeEditorView
        model: @mainPart 
        settings: @settings.at(2)
      @mainMenuView = new MainMenuView
        collection: @lib
        model: @project
      @projectView = new ProjectView
        collection:@lib
      @glThreeView = new GlThreeView
        model: @mainPart
        settings: @settings.at(1)
      @fileBrowserView = new FileBrowserView
        collection: @lib
        
      @mainContentLayout = new MainContentLayout
      """Show all necessary views in the correct regions"""
      @mainRegion.show @mainContentLayout
      #@mainContentLayout.edit.show @codeEditorView
      @mainContentLayout.gl.show @glThreeView
      
      @dialogRegion.show @codeEditorView
      @navigationRegion.show @mainMenuView
      @fileBrowseRegion.show @fileBrowserView
    
    
      
    ### 
    settingsChanged:(settings, value)=> 
        for key, val of @settings.get("General").changedAttributes()
          switch key
            when "theme"
              $("#mainTheme").attr("href","assets/css/themes/#{val}/bootstrap.css")
    
          
    showEditor:()=>
      if not @codeEditorView.isVisible
        @dialogRegion.show @codeEditorView
    ###
        
        
             ###
     CodeEditorView = require "views/codeView"
      MainMenuView = require "views/menuView"
      ProjectView = require "views/projectsview"
      SettingsView = require "views/settingsView"
      MainContentLayout = require "views/mainContentView"
      ModalRegion = require "views/modalRegion"
      DialogRegion = require "views/dialogRegion"
      {LoadView, SaveView} = require "views/fileSaveLoadView"
      GlThreeView = require "views/glThreeView"
      {FileBrowseRegion,FileBrowserView} = require "views/fileBrowserView"
      
      {Library,Project,ProjectFile} = require "modules/project"
    ###
    
#Js regexp experiments, for parsing openscad files


#  ([\w.]+)
#  |#or
#  (\[ ([\w.]+),([\w.]+),([\w.]+) \])
# ;#end
#this works , somewhat:  (\[ (([\w.]+),?)* \])
#(\= | \!= | \+= | -=) ->works

###
pattern = ///
  (
    ([\w]+) 
      [\= \+ \- \*  \/ \%]+ 
    ([\w.]+);
  )+
///g
###

###
pattern = ///
 [^;]+
///g
###


  params_pattern:
    ///
     ([\w]+)
     \=?
     
     [\w.]+
      |  # or
     \[ (.*?)?? \]
    
    ///g



matches = test_string.match(pattern)

console.log("All Matches: "+matches)

for match in matches
  console.log("Match: "+match)
  submatches = match.match(pattern2)
  for submatch in submatches
    console.log("submatch: "+submatch)




#casting: (Number) 

###className = modules[1].replace " ", ""
params = modules[2]
console.log("Module/class name: " + className)
console.log("Module/class params: " + params)
###

        