        content_1:"""
        #This is the project's main configuration file
        #It is better to keep global configuration elements here
        #test 
        sphere = new Sphere
          d: 100
          $fn: 10
          center: [87.505,-25,20]
        cube = new Cube
          size: 100
          #center: [100,0,0]
        cylinder = new Cylinder
          h:200
          r:25
        
        cone = new Cylinder
          h:100
          d1:25
          d2:75
          center:[100,0,0]
        
        cube.translate [0,10,0]
        
        #cube.union(cone).subtract(cylinder).union(sphere)
        cube.color([0.8,0,0])
        cylinder.color([0,1,0])
        cone.color([0,0,1])
        sphere.color([0.9,0.5,0])
        sphere.union(cube).union(cone).subtract(cylinder)
        
        cube2 = cube.clone().color([0.5,0.5,1]).translate(120)
        cube3 = cube.clone().translate([-25,150,0])
        cube3.rotate([0,50,100])
        
        
        return sphere.union([cube2,cube3])
        """
        content____:"""
        #Yeah , we can use classes
        class Thingy extends CSGBase
          constructor: (@thickness=10, @pos=[0,0,0], @rot=[0,0,0]) ->
            super
            shape = CAGBase.fromPoints([[0,0], [150,50], [0,-50]])
            shape.expand(20,25)
            shape = shape.extrude(offset:[0, 0, @thickness])
            
            cyl = new Cylinder(r:10, $fn:12, h:100, center:true)
        
            @union(shape).subtract(cyl).translate(@pos).rotate(@rot).color([1,0.5,0])
            
        #Here we create two new class instances
        thing = new Thingy(35)
        thing2 = new Thingy(25)
        
        res = thing.clone().mirroredX().color([0.2,0.5,0.6]).union(thing2)
        res.rotateX(37).rotateZ(5).translate([0,0,100])
        return res
        """
        content__:"""
        #another test 
        circle = new Circle(r:25,center:[10,10])
        rectangle = new Rectangle(size:25)
        
        circle.intersect(rectangle)
        c = circle.extrude(offset: [0, 0, 100], slices:100,twist:180)
        
        #r = rectangle.extrude(offset: [0, 0, 120], slices:1)
        
        ###
        tmp = new SpecialScrew()
        ###
        return c.color([0.9,0.4,0])
        """
        
        contentzer:"""
        #bla
        cube = new Cube(size: 100)
        
        cube2 = cube.clone()
        cube.rotate([50,50,0]).translate([2,1,50])
        
        
        return cube.union(cube2)
        """
        contentdfg:"""
        #2d hull
        #circle = new Circle(r:10,center:[0,0])
        rectangle = new Rectangle(size:50)
        rectangle2 = new Rectangle(size:20)
        rectangle2.translate([100,0,0])
        
        hulled = quickHull2d(rectangle,rectangle2)
        hulled = hulled.extrude(offset: [0, 0, 100])
        
        return hulled.color([0.9,0.4,0])
        """
        content_dsfd:"""
        #2d hull
        circle = new Circle(r:25,center:[0,0],$fn:10)
        rectangle = new Rectangle(size:20)
        rectangle2 = new Rectangle(size:20)
        rectangle2.translate([100,0,0])
        circle.translate([0,-25,0])
        hulled = quickHull2d(circle,rectangle2)
        hulled = hulled.extrude(offset: [0, 0, 100],twist:180,slices:100)
        
        return hulled.color([0.9,0.4,0])
        """
                content____s:"""
        #just a comment :fix me
        toto = new Cube(size:[50,100,50])
        c = new Cylinder(h:300, r:20,$fn:3)
        toto = toto.subtract(c.translate([10,0,-150]))
        assembly.add(toto)
        """
        contentsfd:"""
        #just a comment :fix me
        class Thinga extends Part
          constructor:(options) ->
            super options
            @toto = new Cube(size:[50,100,50])
            c = new Cylinder(h:300, r:20,$fn:3)
            @union(@toto)
            @subtract(c.translate([10,0,-150]))
        
        thinga1 = new Thinga()
        
        assembly.add(thinga1)
        """
        content_basic:"""
        #just a comment
        cb = new Cube({size:[50,100,50]})
        project.add(cb)
        """
        
        
        rectangle = new Rectangle(size:50)
rectangle2 = new Rectangle(size:20)
rectangle2.translate([100,0,0])

hulled = quickHull2d(rectangle,rectangle2)
hulled2 = hulled.extrude(offset: [0, 0, 100])

#assembly.add(hulled2.color([0.9,0.4,0]))




circle = new Circle(r:25,center:[0,0],$fn:10)
rectangle = new Rectangle(size:20)
rectangle2 = new Rectangle(size:20)
rectangle2.translate([100,0,0])
circle.translate([0,-25,0])
hulled = quickHull2d(circle,rectangle2)
hulled = hulled.extrude(offset: [0, 0, 100],twist:180,slices:100)

assembly.add hulled.color([0.9,0.4,0])

#########
#VERY OLD deprecated stuff
CSG = CSG


ELEC_COLOR =[ 0.5, 0.5, 0.6]

class PingSensor
  #all measurements based on http://www.parallax.com/Portals/0/Downloads/docs/prod/acc/28015-PING-v1.6.pdf
  #usefull
  width:21.3
  length:45.7
  height:3.2
  mount_holes_offset:2.5
  mount_holes_dia:3.1
  
  #visual
  emire_dia: 16.17
  emire_height:12.3
  emire_center_offset:0
  rounding_resolution:16
  
  constructor: (@pos=[0,0,0], @rot=[0,0,0]) ->
    @emire_center_offset=(41.7-@emire_dia)/2
    OpenJsCad.log("Dia is: "+@emire_dia)
    OpenJsCad.log("Center offset is: "+@emire_center_offset)
 
  render: =>
    result = new CSG()
    pcb = CSG.cube({center: [0, 0, 0],radius: [@width/2, @length/2, @height/2]}).translate([0, 0, @height/2]).setColor(0.5, 0.5, 0.6)
    result =result.union(pcb)
    
    for i in [-1,1]
      eyecyl =  CSG.cylinder({start: [0, 0, @height], end: [0, 0, @emire_height+@height],radius: @emire_dia/2,resolution: @rounding_resolution})
      eyecyl= eyecyl.translate([0,i*@emire_center_offset,0]).setColor(0.99, 0.85, 0.0)
      
      holecyl =  CSG.cylinder({start: [0, 0, 0], end: [0, 0, @height],radius: @mount_holes_dia/2,resolution: @rounding_resolution})
      holecyl = holecyl.translate([@width/2*i-i*@mount_holes_offset,@length/2*i-i* @mount_holes_offset,0])
      
      result = result.union(eyecyl).subtract(holecyl)

    return result.translate(@pos).rotateX(@rot[0]).rotateY(@rot[1]).rotateZ(@rot[2])


class AdaServoDriver
  width:25.4
  length:62.5
  height:3
  constructor: (@pos=[0,0,0], @rot=[0,0,0]) ->
    
  render: =>
    result = new CSG()
    pcb = CSG.cube({center: [0, 0, @height/2],radius: [@width/2, @length/2, @height/2]}).setColor(ELEC_COLOR)
    return result.translate(@pos).rotateX(@rot[0]).rotateY(@rot[1]).rotateZ(@rot[2])

ping = new PingSensor()
return ping.render()
