// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var $, CodeEditorView, CodeMirror, CodeView, codeEdit_template, marionette, test_template, _;
    $ = require('jquery');
    _ = require('underscore');
    marionette = require('marionette');
    CodeMirror = require('CodeMirror');
    require('foldcode');
    require('coffee_synhigh');
    test_template = require("text!templates/codeview.tmpl");
    codeEdit_template = require("text!templates/codeedit.tmpl");
    CodeView = (function(_super) {

      __extends(CodeView, _super);

      function CodeView() {
        this.onRender = __bind(this.onRender, this);

        this.onBeforeRender = __bind(this.onBeforeRender, this);
        return CodeView.__super__.constructor.apply(this, arguments);
      }

      CodeView.prototype.template = test_template;

      CodeView.prototype.initialize = function() {
        /*
              @bind @model, ()=>
                name = @get "name"
        */

      };

      CodeView.prototype.onBeforeRender = function() {
        return console.log("pouet");
      };

      CodeView.prototype.onRender = function() {
        return console.log("tjtj");
      };

      return CodeView;

    })(marionette.ItemView);
    CodeEditorView = (function(_super) {

      __extends(CodeEditorView, _super);

      CodeEditorView.prototype.template = codeEdit_template;

      CodeEditorView.prototype.ui = {
        codeBlock: "#codeArea2",
        editor: "#editor"
      };

      CodeEditorView.prototype.templateHelpers = {
        showMessage: function() {
          return "Test";
        }
      };

      function CodeEditorView(options) {
        this.onRender = __bind(this.onRender, this);
        CodeEditorView.__super__.constructor.call(this, options);
      }

      CodeEditorView.prototype.modelChanged = function(model, value) {
        return console.log("model changed");
      };

      CodeEditorView.prototype.updateUndoRedo = function() {
        var redoes, undoes;
        redoes = this.editor.historySize().redo;
        undoes = this.editor.historySize().undo;
        if (redoes > 0) {
          console.log("redoes");
        }
        if (undoes > 0) {
          console.log("undoes");
        }
        if (redoes > 0) {
          $('#redoBtn').removeClass("disabled");
        } else {
          $('#redoBtn').addClass("disabled");
        }
        if (undoes > 0) {
          return $('#undoBtn').removeClass("disabled");
        } else {
          return $('#undoBtn').addClass("disabled");
        }
      };

      CodeEditorView.prototype.onRender = function() {
        var _this = this;
        this.editor = CodeMirror.fromTextArea(this.ui.codeBlock.get(0), {
          mode: "coffeescript",
          lineNumbers: true,
          gutter: true,
          matchBrackets: true,
          firstLineNumber: 1,
          onChange: function(arg, arg2) {
            _this.triggerMethod("foo:bar");
            _this.model.set("content", _this.editor.getValue());
            console.log(_this.model);
            return _this.updateUndoRedo();
          }
        });
        setTimeout(this.editor.refresh, 0);
        return this.ui.editor.removeClass("hide");
      };

      return CodeEditorView;

    })(marionette.ItemView);
    return CodeEditorView;
  });

}).call(this);
