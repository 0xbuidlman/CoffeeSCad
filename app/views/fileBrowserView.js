// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var $, FileBrowseRegion, FileBrowserView, SingleFileView, boostrap, dummyTemplate, fileBrowserSingleTemplate, fileBrowserTemplate, jquery_ui, jstree, marionette, _;
    $ = require('jquery');
    _ = require('underscore');
    boostrap = require('bootstrap');
    marionette = require('marionette');
    jstree = require('jquery_jstree');
    dummyTemplate = require("text!templates/dummy.tmpl");
    fileBrowserSingleTemplate = require("text!templates/fileBrowserSingle.tmpl");
    fileBrowserTemplate = require("text!templates/fileBrowser.tmpl");
    jquery_ui = require('jquery_ui');
    FileBrowseRegion = (function(_super) {

      __extends(FileBrowseRegion, _super);

      FileBrowseRegion.prototype.el = "#fileBrowseRegion";

      function FileBrowseRegion() {
        this.showModal = __bind(this.showModal, this);

        this._showModal = __bind(this._showModal, this);
        _.bindAll(this);
        this.on("view:show", this.showModal, this);
      }

      FileBrowseRegion.prototype.getEl = function(selector) {
        var $el;
        $el = $(selector);
        $el.on("hidden", this.close);
        return $el;
      };

      FileBrowseRegion.prototype._showModal = function(view) {
        view.on("close", this.hideModal, this);
        return this.$el.modal({
          'show': true,
          'backdrop': false
        }).addClass('modal-big');
      };

      FileBrowseRegion.prototype.showModal = function(view) {
        var $el, el,
          _this = this;
        $el = this.getEl();
        view.isVisible = true;
        el = "#fileBrowseRegion";
        return $(el).dialog({
          title: "Files",
          width: 200,
          height: 400,
          position: {
            my: "left center",
            at: "left center"
          },
          beforeClose: function() {
            view.isVisible = false;
            return view.close();
          }
        });
      };

      FileBrowseRegion.prototype.hideModal = function() {
        return this.$el.modal('hide');
      };

      return FileBrowseRegion;

    })(Backbone.Marionette.Region);
    SingleFileView = (function(_super) {

      __extends(SingleFileView, _super);

      function SingleFileView() {
        return SingleFileView.__super__.constructor.apply(this, arguments);
      }

      SingleFileView.prototype.template = fileBrowserSingleTemplate;

      SingleFileView.prototype.tagName = "ul";

      SingleFileView.prototype.templateHelpers = {
        renderFiles: function() {
          var fileInfo, item, pfile, _i, _len, _ref;
          console.log("in render files");
          fileInfo = "";
          console.log(this);
          console.log(this.files);
          console.log(this.pfiles.length);
          _ref = this.pfiles;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            pfile = _ref[_i];
            item = "<li><a href='#'>" + (pfile.get('name')) + "</a></li>";
            fileInfo += item;
          }
          return fileInfo;
        }
      };

      return SingleFileView;

    })(Backbone.Marionette.ItemView);
    FileBrowserView = (function(_super) {

      __extends(FileBrowserView, _super);

      FileBrowserView.prototype.itemView = SingleFileView;

      function FileBrowserView(options) {
        FileBrowserView.__super__.constructor.call(this, options);
        this.app = require('app');
      }

      FileBrowserView.prototype.onRender_ = function(options) {
        var tmp,
          _this = this;
        tmp = this.$el.jstree({
          "core": {
            "animation": 0
          },
          "plugins": ["themes", "html_data", "ui", "contextmenu"]
          /* 
          "html_data" : 
            "data" : """
            <li id='root'>
              <a href='#'>Root node</a>
              <ul><li><a href='#'>Child node</a></li></ul>
              <ul><li><a href='#'>Child node2</a></li></ul>
              <ul>
                <li>
                  <a href='#'>Child node2</a>
                  <ul>
                    <li><a href='#'>Child node2 sub 1</a></li>
                  </ul>
                </li>
              </ul>
            </li>"""
          */

        });
        tmp.bind("loaded.jstree", function(event, data) {
          return console.log("JSTREE ready");
        });
        this.$el.bind("open_node.jstree close_node.jstree", function(e) {
          return console.log("tutupouet");
        });
        return this.$el.bind("select_node.jstree", function(event, data) {
          return console.log("gnark");
        });
      };

      return FileBrowserView;

    })(Backbone.Marionette.CollectionView);
    return {
      FileBrowserView: FileBrowserView,
      FileBrowseRegion: FileBrowseRegion
    };
  });

}).call(this);
