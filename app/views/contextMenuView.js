// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var $, ContextMenu, ContextMenuRegion, boostrap, contextMenuTemplate, jquery_ui, jstree, marionette, _;
    $ = require('jquery');
    _ = require('underscore');
    boostrap = require('bootstrap');
    marionette = require('marionette');
    jstree = require('jquery_jstree');
    contextMenuTemplate = require("text!templates/contextMenu.tmpl");
    jquery_ui = require('jquery_ui');
    ContextMenuRegion = (function(_super) {

      __extends(ContextMenuRegion, _super);

      ContextMenuRegion.prototype.el = "#";

      function ContextMenuRegion(options) {
        this.showModal = __bind(this.showModal, this);

        this.showModal_ = __bind(this.showModal_, this);
        ContextMenuRegion.__super__.constructor.call(this, options);
        this.initialMouseCoords = options.mouseCoords;
        console.log(options.selection);
        this.makeEl();
        this.$el = $("#contexMenu");
        _.bindAll(this);
        this.on("view:show", this.showModal, this);
      }

      ContextMenuRegion.prototype.makeEl = function() {
        return $('<div/>', {
          id: 'contexMenu'
        }).appendTo('body');
      };

      ContextMenuRegion.prototype.getEl = function(selector) {
        var $el;
        $el = $(selector);
        $el.on("hidden", this.close);
        return $el;
      };

      ContextMenuRegion.prototype.showModal_ = function(view) {
        return this.$el.dropdown();
      };

      ContextMenuRegion.prototype.showModal = function(view) {
        var $el, el,
          _this = this;
        $el = this.getEl();
        view.isVisible = true;
        el = "#contexMenu";
        return $(el).dialog({
          width: 120,
          height: 200,
          resizable: false,
          draggable: false,
          position: this.initialMouseCoords,
          beforeClose: function() {
            view.isVisible = false;
            return view.close();
          }
        });
      };

      ContextMenuRegion.prototype.hideModal = function() {
        return this.$el.modal('hide');
      };

      return ContextMenuRegion;

    })(Backbone.Marionette.Region);
    ContextMenu = (function(_super) {

      __extends(ContextMenu, _super);

      ContextMenu.prototype.template = contextMenuTemplate;

      function ContextMenu(options) {
        ContextMenu.__super__.constructor.call(this, options);
        this.app = require('app');
      }

      return ContextMenu;

    })(Backbone.Marionette.ItemView);
    return {
      ContextMenu: ContextMenu,
      ContextMenuRegion: ContextMenuRegion
    };
  });

}).call(this);
