// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function(require) {
    var $, EditorSettingsForm, GeneralSettingsForm, GitHubSettingsForm, GlViewSettingsForm, SettingView, SettingsView, boostrap, forms, marionette, s_template, st_template, _;
    $ = require('jquery');
    _ = require('underscore');
    boostrap = require('bootstrap');
    marionette = require('marionette');
    forms = require('forms');
    forms = require('forms');
    s_template = require("text!templates/settings.tmpl");
    st_template = require("text!templates/setting.tmpl");
    SettingView = (function(_super) {

      __extends(SettingView, _super);

      function SettingView() {
        return SettingView.__super__.constructor.apply(this, arguments);
      }

      SettingView.prototype.template = st_template;

      SettingView.prototype.tagName = "li";

      return SettingView;

    })(marionette.ItemView);
    SettingsView = (function(_super) {

      __extends(SettingsView, _super);

      SettingsView.prototype.template = s_template;

      SettingsView.prototype.itemView = SettingView;

      SettingsView.prototype.tagName = "ul";

      SettingsView.prototype.ui = {
        settingsList: "#settings"
      };

      function SettingsView(options) {
        this.render = __bind(this.render, this);
        SettingsView.__super__.constructor.call(this, options);
        this.app = require('app');
      }

      SettingsView.prototype.render = function() {
        var r1, tmpl;
        tmpl = _.template(this.template);
        r1 = tmpl(this.collection.toJSON());
        $(this.ui.settingsList).html(r1);
        return this;
      };

      return SettingsView;

    })(marionette.CollectionView);
    GeneralSettingsForm = (function(_super) {

      __extends(GeneralSettingsForm, _super);

      function GeneralSettingsForm(options) {
        if (!options.schema) {
          options.schema = {
            'Max nb of recent files': 'Number',
            'view auto update': 'Checkbox'
          };
        }
        GeneralSettingsForm.__super__.constructor.call(this, options);
      }

      return GeneralSettingsForm;

    })(Backbone.Form);
    GlViewSettingsForm = (function(_super) {

      __extends(GlViewSettingsForm, _super);

      function GlViewSettingsForm(options) {
        if (!options.schema) {
          options.schema = {
            showGrid: 'Checkbox',
            showAxis: 'Checkbox',
            renderer: {
              type: 'Select',
              options: ["webgl", "canvas"]
            },
            antialiasing: 'Checkbox',
            shadows: 'Checkbox'
          };
        }
        GlViewSettingsForm.__super__.constructor.call(this, options);
      }

      return GlViewSettingsForm;

    })(Backbone.Form);
    EditorSettingsForm = (function(_super) {

      __extends(EditorSettingsForm, _super);

      function EditorSettingsForm(options) {
        if (!options.schema) {
          options.schema = {
            'Start line': 'Number'
          };
        }
        EditorSettingsForm.__super__.constructor.call(this, options);
      }

      return EditorSettingsForm;

    })(Backbone.Form);
    GitHubSettingsForm = (function(_super) {

      __extends(GitHubSettingsForm, _super);

      function GitHubSettingsForm(options) {
        if (!options.schema) {
          options.schema = {
            'Start line': 'Number'
          };
        }
        GitHubSettingsForm.__super__.constructor.call(this, options);
      }

      return GitHubSettingsForm;

    })(Backbone.Form);
    return GlViewSettingsForm;
  });

}).call(this);
