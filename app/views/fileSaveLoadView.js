// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function(require) {
    var $, LoadView, ModalRegion, SaveView, SettingsView, boostrap, lF_template, marionette, sF_template, s_template, _;
    $ = require('jquery');
    _ = require('underscore');
    boostrap = require('bootstrap');
    marionette = require('marionette');
    sF_template = require("text!templates/saveFile.tmpl");
    lF_template = require("text!templates/loadFile.tmpl");
    s_template = require("text!templates/settings.tmpl");
    SaveView = (function(_super) {

      __extends(SaveView, _super);

      SaveView.prototype.template = sF_template;

      SaveView.prototype.triggers = {
        "mouseup .saveFile": "file:save:mouseup"
      };

      function SaveView(options) {
        var _this = this;
        SaveView.__super__.constructor.call(this, options);
        this.app = require('app');
        this.on("file:save:mouseup", function() {
          _this.app.vent.trigger("fileSaveRequest", _this);
          return _this.close();
        });
      }

      return SaveView;

    })(marionette.ItemView);
    LoadView = (function(_super) {

      __extends(LoadView, _super);

      LoadView.prototype.template = lF_template;

      LoadView.prototype.triggers = {
        "mouseup .loadFile": "file:load:mouseup"
      };

      function LoadView(options) {
        var _this = this;
        LoadView.__super__.constructor.call(this, options);
        this.app = require('app');
        this.on("file:load:mouseup", function() {
          _this.app.vent.trigger("fileLoadRequest", _this);
          return _this.close();
        });
      }

      return LoadView;

    })(marionette.ItemView);
    SettingsView = (function(_super) {

      __extends(SettingsView, _super);

      SettingsView.prototype.template = s_template;

      function SettingsView(options) {
        SettingsView.__super__.constructor.call(this, options);
        this.app = require('app');
      }

      return SettingsView;

    })(marionette.ItemView);
    ModalRegion = (function(_super) {

      __extends(ModalRegion, _super);

      ModalRegion.prototype.el = "#modal";

      function ModalRegion() {
        this.showModal = __bind(this.showModal, this);
        _.bindAll(this);
        this.on("view:show", this.showModal, this);
      }

      ModalRegion.prototype.getEl = function(selector) {
        var $el;
        $el = $(selector);
        $el.on("hidden", this.close);
        return $el;
      };

      ModalRegion.prototype.showModal = function(view) {
        view.on("close", this.hideModal, this);
        return this.$el.modal('show');
      };

      ModalRegion.prototype.hideModal = function() {
        return this.$el.modal('hide');
      };

      return ModalRegion;

    })(marionette.Region);
    return [ModalRegion, SaveView, LoadView, SettingsView];
  });

}).call(this);
