// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function(require) {
    var $, Backbone, Library, LocalStorage, Project, ProjectFile, ProjectFiles, _;
    $ = require('jquery');
    _ = require('underscore');
    Backbone = require('backbone');
    LocalStorage = require('localstorage');
    ProjectFile = (function(_super) {

      __extends(ProjectFile, _super);

      ProjectFile.prototype.defaults = {
        name: "main",
        ext: "coscad",
        content: ""
      };

      function ProjectFile(options) {
        ProjectFile.__super__.constructor.call(this, options);
        this.rendered = false;
      }

      return ProjectFile;

    })(Backbone.Model);
    ProjectFiles = (function(_super) {

      __extends(ProjectFiles, _super);

      function ProjectFiles() {
        return ProjectFiles.__super__.constructor.apply(this, arguments);
      }

      ProjectFiles.prototype.model = ProjectFile;

      return ProjectFiles;

    })(Backbone.Collection);
    Project = (function(_super) {

      __extends(Project, _super);

      Project.prototype.defaults = {
        name: "TestProject",
        content: "bla"
      };

      function Project(options) {
        this.add = __bind(this.add, this);

        this.remove = __bind(this.remove, this);
        Project.__super__.constructor.call(this, options);
        this.pfiles = new ProjectFiles();
      }

      Project.prototype.remove = function(model) {
        return this.pfiles.remove(model);
      };

      Project.prototype.add = function(model) {
        return this.pfiles.add(model);
      };

      Project.prototype["export"] = function(format) {};

      return Project;

    })(Backbone.Model);
    Library = (function(_super) {

      __extends(Library, _super);

      function Library() {
        return Library.__super__.constructor.apply(this, arguments);
      }

      Library.prototype.model = Project;

      Library.prototype.localStorage = new Backbone.LocalStorage("Library");

      return Library;

    })(Backbone.Collection);
    return [ProjectFile, Project, Library];
  });

  /*
    initialize:(options)->
      @bind "change:name", ()=>
        name = @get "name"
        console.log "Changed my name to " + name
  */


}).call(this);
