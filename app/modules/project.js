// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function(require) {
    var $, Backbone, Library, LocalStorage, Project, ProjectFile, ProjectFiles, _;
    $ = require('jquery');
    _ = require('underscore');
    Backbone = require('backbone');
    LocalStorage = require('localstorage');
    ProjectFile = (function(_super) {

      __extends(ProjectFile, _super);

      ProjectFile.prototype.idAttribute = 'name';

      ProjectFile.prototype.defaults = {
        name: "mainPart",
        ext: "coscad",
        content: ""
      };

      function ProjectFile(options) {
        var _this = this;
        ProjectFile.__super__.constructor.call(this, options);
        this.rendered = false;
        this.dirty = false;
        this.bind("change", function() {
          return _this.dirty = true;
        });
        this.bind("sync", function() {
          return _this.dirty = false;
        });
      }

      return ProjectFile;

    })(Backbone.Model);
    ProjectFiles = (function(_super) {

      __extends(ProjectFiles, _super);

      function ProjectFiles() {
        return ProjectFiles.__super__.constructor.apply(this, arguments);
      }

      ProjectFiles.prototype.model = ProjectFile;

      return ProjectFiles;

    })(Backbone.Collection);
    Project = (function(_super) {

      __extends(Project, _super);

      Project.prototype.idAttribute = 'name';

      Project.prototype.defaults = {
        name: "TestProject"
      };

      function Project(options) {
        this.fetch_file = __bind(this.fetch_file, this);

        this.remove = __bind(this.remove, this);

        this.add = __bind(this.add, this);

        var locStorName;
        Project.__super__.constructor.call(this, options);
        this.bind("reset", this.onReset);
        this.files = [];
        this.pfiles = new ProjectFiles();
        locStorName = "Library-" + this.get("name") + "-parts";
        this.pfiles.localStorage = new Backbone.LocalStorage(locStorName);
      }

      Project.prototype.onReset = function() {
        console.log("Project model reset");
        console.log(this);
        return console.log("_____________");
      };

      Project.prototype.onSync = function() {
        console.log("Project sync");
        console.log(this);
        return console.log("_____________");
      };

      Project.prototype.add = function(pFile) {
        this.pfiles.add(pFile);
        return this.files.push(pFile.get("name"));
      };

      Project.prototype.remove = function(pFile) {
        var index;
        index = this.files.indexOf(pFile.get("name"));
        this.files.splice(index, 1);
        return this.pfiles.remove(pFile);
      };

      Project.prototype.fetch_file = function(options) {
        var id, pFile;
        id = options.id;
        console.log("id specified: " + id);
        if (this.pfiles.get(id)) {
          pFile = this.pfiles.get(id);
        } else {
          pFile = new ProjectFile({
            name: id
          });
          pFile.collection = this.pfiles;
          pFile.fetch();
        }
        return pFile;
      };

      Project.prototype["export"] = function(format) {};

      return Project;

    })(Backbone.Model);
    Library = (function(_super) {

      __extends(Library, _super);

      Library.prototype.model = Project;

      Library.prototype.localStorage = new Backbone.LocalStorage("Library");

      Library.prototype.defaults = {
        recentProjects: []
      };

      function Library(options) {
        this.parse = __bind(this.parse, this);

        this.fetch = __bind(this.fetch, this);

        this.save = __bind(this.save, this);
        Library.__super__.constructor.call(this, options);
        this.bind("reset", this.onReset);
        this.namesFetch = false;
      }

      Library.prototype.save = function() {
        return this.each(function(model) {
          return model.save();
        });
      };

      Library.prototype.fetch = function(options) {
        var id, proj, res;
        if (options != null) {
          console.log("options" + options);
          if (options.id != null) {
            id = options.id;
            if (this.get(id)) {
              proj = this.get(id);
            } else {
              proj = new Project({
                name: id
              });
              proj.collection = this;
              proj.fetch();
            }
            return proj;
          } else {
            res = Library.__super__.fetch.apply(this, options);
            return res;
          }
        } else {
          res = Library.__super__.fetch.call(this, options);
          return res;
        }
      };

      Library.prototype.parse = function(response) {
        var i, v;
        for (i in response) {
          v = response[i];
          response[i].pfiles = new ProjectFiles(response[i].pfiles);
        }
        return response;
      };

      Library.prototype.getLatest = function() {
        return this.namesFetch = true;
      };

      Library.prototype.onReset = function() {
        console.log("Library collection reset");
        console.log(this);
        return console.log("_____________");
      };

      return Library;

    })(Backbone.Collection);
    return {
      ProjectFile: ProjectFile,
      Project: Project,
      Library: Library
    };
  });

}).call(this);
