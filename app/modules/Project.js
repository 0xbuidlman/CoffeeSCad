// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var Project, ProjectFile, app, project;
    app = require('app');
    project = {};
    ProjectFile = (function(_super) {

      __extends(ProjectFile, _super);

      ProjectFile.prototype.defaults = {
        name: "main",
        ext: "coscad",
        content: "",
        blo: []
      };

      function ProjectFile(options) {
        console.log("in constructor");
        ProjectFile.__super__.constructor.call(this, options);
        this.blo = this.get("blo");
        this.name = this.get("name");
      }

      ProjectFile.prototype.initialize = function(options) {
        var _this = this;
        return this.bind("change:name", function() {
          var name;
          name = _this.get("name");
          return console.log("Changed my name to " + name);
        });
      };

      ProjectFile.prototype.bla = function(truc) {
        console.log(this.get("blo"));
        return this.get("blo").push(truc);
      };

      ProjectFile.prototype.bli = function(truc) {
        console.log(this.blo);
        return this.blo.push(truc);
      };

      return ProjectFile;

    })(Backbone.Model);
    Project = (function(_super) {

      __extends(Project, _super);

      Project.prototype.model = ProjectFile;

      function Project(options) {
        this.all_files_saved = false;
        Project.__super__.constructor.call(this, options);
      }

      Project.prototype["export"] = function(format) {};

      project.ProjectFile = ProjectFile;

      project.Project = Project;

      return Project;

    })(Backbone.Collection);
    return project;
  });

}).call(this);
